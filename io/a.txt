 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





























 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。


















 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。












 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。 使用 node 运行  main.js后，你会发现定时器的先打印，（增加定时器的触发时间，你会发现，打印的顺序会改变。）
具体的异步代码执行顺序，是由node.js内部机制控制的，我们很难准确预知。这里给大家介绍一下node.js的事件模型：

Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。

当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）

在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。



 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。








 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















v 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。




















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。



















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。





















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。
































 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。























 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。






















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。

















 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。













 异步IO操作

 我们前面讲的文件读取的方式是一次性全部读取，当文件过大的时候，一次性读取不仅缓慢，而且影响用户体验，那么怎么实现分步读取呢，

这就得使用到异步IO的操作，像水流一样流出一段取得一段。

具体实现：

我们创建一个文件读取流，先上代码 

我们将 a.txt中的内容增加，以让读取时间变长，

代码中，创建main3.js写入上面的代码，使用 reateReadStream创建读取流对象，在对象上使用on监听“data”读取数据的事件，每读取一段数据，就会触发这个事件，当读取完毕， 就会触发“end”事件。

执行main3.js，我们就可以看到下面打印的结果，从打印的多行"..."中，我们就可以看出，读取了多次才读完。